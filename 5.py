# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


class TestReporting():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def login(self):
        self.driver.get("https://organicafoods.odoo.com/web/login")
        self.driver.set_window_size(1321, 741)
        self.driver.find_element(
            By.ID, "login").send_keys("gm070797@gmail.com")
        self.driver.find_element(By.ID, "password").send_keys(
            "Organicafoods" + Keys.RETURN)
        WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable(
            (By.CSS_SELECTOR, "body > div.o_home_menu > div.o_home_menu_scrollable > div.o_apps > a:nth-child(2) > div.o_app_icon")))
        self.driver.find_element(
            By.CSS_SELECTOR, "body > div.o_home_menu > div.o_home_menu_scrollable > div.o_apps > a:nth-child(2) > div.o_app_icon").click()

    def test_downloadorders(self):
        # Test name: download_orders
        # Step # | name | target | value | comment
        # 1 | open | /web |  |
        self.login()

        # 4 | click | linkText=Reporting |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.LINK_TEXT, "Reporting")))
        self.driver.find_element(By.LINK_TEXT, "Reporting").click()
        # 5 | click | css=.show > .dropdown-item:nth-child(1) > span |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((
                By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1) > span")))
        self.driver.find_element(
            By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1) > span").click()
        # 6 | click | css=.fa-table |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".fa-table")))
        self.driver.find_element(By.CSS_SELECTOR, ".fa-table").click()
        # 7 | mouseOver | css=.fa-area-chart |  |
        element = self.driver.find_element(By.CSS_SELECTOR, ".fa-area-chart")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 8 | click | css=.fa-download |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".fa-download")))
        self.driver.find_element(By.CSS_SELECTOR, ".fa-download").click()

    def test_printsales(self):
        # Test name: print_sales
        # Step # | name | target | value | comment
        # 4 | click | linkText=Reporting |  |
        self.login()
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.LINK_TEXT, "Reporting")))
        self.driver.find_element(By.LINK_TEXT, "Reporting").click()
        # 5 | click | css=.show > .dropdown-item:nth-child(2) > span |  |
        self.driver.find_element(
            By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(2) > span").click()
        # 6 | click | css=.btn-primary > span |  |
        WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
            (By.CSS_SELECTOR, ".btn-primary > span")))
        self.driver.find_element(
            By.CSS_SELECTOR, ".btn-primary > span").click()


# # class TestSearchorders():
# #     def setup_method(self, method):
# #         self.driver = webdriver.Chrome()
# #         self.vars = {}

# #     def teardown_method(self, method):
# #         self.driver.quit()


    def test_searchorders(self):
        # Test name: search_orders
        # Step # | name | target | value | comment
        # 4 | click | linkText=Reporting |  |
        self.login()
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.LINK_TEXT, "Reporting")))
        self.driver.find_element(By.LINK_TEXT, "Reporting").click()
        # 5 | click | css=.show > .dropdown-item:nth-child(1) |  |
        WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
            (By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1)")))
        self.driver.find_element(
            By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1)").click()
        # 6 | click | css=.o_searchview_input |  |
        WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
            (By.CSS_SELECTOR, ".o_searchview_input")))

        self.driver.find_element(
            By.CSS_SELECTOR, ".o_searchview_input").click()

    def test_vieworder(self):
        # Test name: view_order
        # Step # | name | target | value | comment
        # 1 | open | /web |  |
        self.login()
        # 4 | click | linkText=Reporting |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.LINK_TEXT, "Reporting")))
        self.driver.find_element(By.LINK_TEXT, "Reporting").click()
        # 5 | click | css=.show > .dropdown-item:nth-child(1) |  |
        WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
            (By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1)")))
        self.driver.find_element(
            By.CSS_SELECTOR, ".show > .dropdown-item:nth-child(1)").click()
        # 6 | click | css=.fa-table |  |
        WebDriverWait(self.driver, 10).until(
            expected_conditions.presence_of_element_located((By.CSS_SELECTOR, ".fa-table")))
        self.driver.find_element(By.CSS_SELECTOR, ".fa-table").click()
